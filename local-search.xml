<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>LWJGL教程08 - 变换</title>
    <link href="/2024/07/19/lwjgl-08/"/>
    <url>/2024/07/19/lwjgl-08/</url>
    
    <content type="html"><![CDATA[<h1 id="透视投影"><a href="#透视投影" class="headerlink" title="透视投影"></a>透视投影</h1><p>当改变z坐标时，渲染的矩形并没有大小上的变化。</p><p>是由于x，y坐标没有改变。</p><p><img src="/2024/07/19/lwjgl-08/QianJianTec1721361499982.png" alt="Projection">其中<br>$$<br>\alpha &#x3D; \frac{W_w}{W_h}<br>$$<br>暂时先不推导。</p><p>使用JOML处理LWJGL内的数学运算。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.joml<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>joml<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;joml.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>    [...]<br>    <span class="hljs-tag">&lt;<span class="hljs-name">joml.version</span>&gt;</span>1.9.6<span class="hljs-tag">&lt;/<span class="hljs-name">joml.version</span>&gt;</span><br>    [...]<br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>LWJGL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LWJGL教程07 - 上色</title>
    <link href="/2024/07/19/lwjgl-07/"/>
    <url>/2024/07/19/lwjgl-07/</url>
    
    <content type="html"><![CDATA[<h1 id="让顶点拥有颜色"><a href="#让顶点拥有颜色" class="headerlink" title="让顶点拥有颜色"></a>让顶点拥有颜色</h1><p>修改<code>Mesh</code>的构造函数，传入一个浮点数组。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">Mesh</span><span class="hljs-params">(<span class="hljs-type">float</span>[] vertices,<span class="hljs-type">float</span>[] colors, <span class="hljs-type">int</span>[] indices)</span> &#123;<br>    [...]<br><br>    <span class="hljs-comment">// 颜色</span><br>    vboId = glGenBuffers();<br>    <span class="hljs-type">FloatBuffer</span> <span class="hljs-variable">colourBuffer</span> <span class="hljs-operator">=</span> MemoryUtil.memAllocFloat(colors.length);<br>    colourBuffer.put(colors).flip();<br>    glBindBuffer(GL_ARRAY_BUFFER, vboId);<br>    glBufferData(GL_ARRAY_BUFFER, colourBuffer, GL_STATIC_DRAW);<br>    glEnableVertexAttribArray(<span class="hljs-number">1</span>);<br>    glVertexAttribPointer(<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, GL_FLOAT, <span class="hljs-literal">false</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br><br>    [...]<br>    <br>    MemoryUtil.memFree(verticesBuffer);<br>    MemoryUtil.memFree(indicesBuffer);<br>    MemoryUtil.memFree(colourBuffer);<br>&#125;<br></code></pre></td></tr></table></figure><p>接着修改着色器。</p><p>顶点着色器<code>vertex.vert</code>。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#version 330</span><br><br>layout (location=<span class="hljs-number">0</span>) in vec3 position;<br>layout (location=<span class="hljs-number">1</span>) in vec3 inColour;<br><br>out vec3 exColour;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    gl_Position = vec4(position, <span class="hljs-number">1.0</span>);<br>    exColour = inColour;<br>&#125;<br></code></pre></td></tr></table></figure><p>片元着色器<code>fragment.frag</code>。</p><p>最后测试一下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java">[imports ...]<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestLogic</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ILogic</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span> &#123;<br>        [...]<br>        <br>        <span class="hljs-type">float</span>[] colors = <span class="hljs-keyword">new</span> <span class="hljs-title class_">float</span>[]&#123;<br>                <span class="hljs-number">0.5f</span>, <span class="hljs-number">0.0f</span>, <span class="hljs-number">0.0f</span>,<br>                <span class="hljs-number">0.0f</span>, <span class="hljs-number">0.5f</span>, <span class="hljs-number">0.0f</span>,<br>                <span class="hljs-number">0.0f</span>, <span class="hljs-number">0.0f</span>, <span class="hljs-number">0.5f</span>,<br>                <span class="hljs-number">0.0f</span>, <span class="hljs-number">0.5f</span>, <span class="hljs-number">0.5f</span>,<br>        &#125;;<br><br>        <span class="hljs-type">Mesh</span> <span class="hljs-variable">mesh</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Mesh</span>(vertices, colors, indices);<br><br>        Engine.scene.addMesh(mesh);<br>    &#125;<br><br>    [...]<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2024/07/19/lwjgl-07/image-20240719105242564.png" alt="运行结果"></p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>LWJGL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LWJGL教程06 - 优化Mesh</title>
    <link href="/2024/07/18/lwjgl-06/"/>
    <url>/2024/07/18/lwjgl-06/</url>
    
    <content type="html"><![CDATA[<h1 id="减少顶点数量"><a href="#减少顶点数量" class="headerlink" title="减少顶点数量"></a>减少顶点数量</h1><p><img src="/2024/07/18/lwjgl-06/image-20240719001052905.png" alt="运行结果"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">float</span>[] vertices1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">float</span>[] &#123;<br>        -<span class="hljs-number">0.5f</span>,  <span class="hljs-number">0.5f</span>, <span class="hljs-number">0.0f</span>,<span class="hljs-comment">// v1</span><br>        -<span class="hljs-number">0.5f</span>, -<span class="hljs-number">0.5f</span>, <span class="hljs-number">0.0f</span>,<span class="hljs-comment">// v2 = v5</span><br>        <span class="hljs-number">0.5f</span>,  <span class="hljs-number">0.5f</span>, <span class="hljs-number">0.0f</span>,<span class="hljs-comment">// v3 = v4</span><br>        <span class="hljs-number">0.5f</span>,  <span class="hljs-number">0.5f</span>, <span class="hljs-number">0.0f</span>,<span class="hljs-comment">// v4 重复</span><br>        -<span class="hljs-number">0.5f</span>, -<span class="hljs-number">0.5f</span>, <span class="hljs-number">0.0f</span>,<span class="hljs-comment">// v5 重复</span><br>        <span class="hljs-number">0.5f</span>, -<span class="hljs-number">0.5f</span>, <span class="hljs-number">0.0f</span>,<span class="hljs-comment">// v6</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>这是这个矩形的顶点。</p><p>一共有6个顶点，但是一个矩形只需4个就足够。</p><p>可以发现，<code>v2</code>和<code>v3</code>重复传递了。</p><p>当三角形数量增加时，重复传递的顶点就会变很多。</p><p>一个顶点可以共享给多个三角形。</p><h2 id="索引缓冲区"><a href="#索引缓冲区" class="headerlink" title="索引缓冲区"></a>索引缓冲区</h2><p>使用索引数据绘制三角形。</p><p>将索引合并上传给GPU，这样能节约性能。</p><p>假设有四个点。</p><p><img src="/2024/07/18/lwjgl-06/1133196-20180129213759140-364023823.png" alt="四个点"></p><p>合并的顶点数据。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">float</span>[] vertices = <span class="hljs-keyword">new</span> <span class="hljs-title class_">float</span>[] &#123;<br>    x1, y1, z1,<span class="hljs-comment">// p0</span><br>    x2, y2, z2,<span class="hljs-comment">// p1</span><br>    x3, y3, z3,<span class="hljs-comment">// p2</span><br>    x4, y4, z4<span class="hljs-comment">// p3</span><br>&#125;<br></code></pre></td></tr></table></figure><p>合并的索引数据。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] indices = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[] &#123;<br>    p0, p1, p2,<br>    p3, p0, p2<br>&#125;<br></code></pre></td></tr></table></figure><p>值得一提的是，openGL习惯逆时针为正方向。</p><h1 id="修改Mesh类"><a href="#修改Mesh类" class="headerlink" title="修改Mesh类"></a>修改Mesh类</h1><p>将<code>Mesh</code>的构造函数稍微修改一下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">Mesh</span><span class="hljs-params">(<span class="hljs-type">float</span>[] vertices, <span class="hljs-type">int</span>[] indices)</span> &#123;<br>    <span class="hljs-built_in">this</span>.verticesCount = indices.length;<br><br>    <span class="hljs-comment">// 顶点</span><br>    [...]<br><br>    <span class="hljs-comment">// 索引</span><br>    vboId = glGenBuffers();<br>    <span class="hljs-type">IntBuffer</span> <span class="hljs-variable">indicesBuffer</span> <span class="hljs-operator">=</span> MemoryUtil.memAllocInt(indices.length);<br>    indicesBuffer.put(indices).flip();<br>    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, vboId);<br>    glBufferData(GL_ELEMENT_ARRAY_BUFFER, indicesBuffer, GL_STATIC_DRAW);<br><br>    [...]<br>    <br>    MemoryUtil.memFree(indicesBuffer);<br>&#125;<br></code></pre></td></tr></table></figure><p>然后将<code>Render.rener()</code>中的<code>glDrawArrays(GL_TRIANGLES, 0, mesh.getVerticesCount());</code></p><p>改为<code>glDrawElements(GL_TRIANGLES, mesh.getVerticesCount(), GL_UNSIGNED_INT, 0);</code></p><p>最后测试一下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java">[imports ...]<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestLogic</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ILogic</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">float</span>[] vertices = <span class="hljs-keyword">new</span> <span class="hljs-title class_">float</span>[] &#123;<br>                -<span class="hljs-number">0.5f</span>,  <span class="hljs-number">0.5f</span>, <span class="hljs-number">0.0f</span>,    <span class="hljs-comment">// v1</span><br>                -<span class="hljs-number">0.5f</span>, -<span class="hljs-number">0.5f</span>, <span class="hljs-number">0.0f</span>,    <span class="hljs-comment">// v2</span><br>                <span class="hljs-number">0.5f</span>,  <span class="hljs-number">0.5f</span>, <span class="hljs-number">0.0f</span>,     <span class="hljs-comment">// v3</span><br>                <span class="hljs-number">0.5f</span>, -<span class="hljs-number">0.5f</span>, <span class="hljs-number">0.0f</span>,     <span class="hljs-comment">// v4</span><br>        &#125;;<br>        <span class="hljs-type">int</span>[] indices = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[] &#123;<br>                <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>,<br>                <span class="hljs-number">3</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2</span><br>        &#125;;<br><br>        <span class="hljs-type">Mesh</span> <span class="hljs-variable">mesh</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Mesh</span>(vertices, indices);<br><br>        Engine.scene.addMesh(mesh);<br>    &#125;<br><br>    [...]<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2024/07/18/lwjgl-06/image-20240719005319248.png" alt="运行结果"></p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>LWJGL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LWJGL教程05 - 改进渲染</title>
    <link href="/2024/07/18/lwjgl-05/"/>
    <url>/2024/07/18/lwjgl-05/</url>
    
    <content type="html"><![CDATA[<h1 id="让Mesh类创建VBO和VAO对象"><a href="#让Mesh类创建VBO和VAO对象" class="headerlink" title="让Mesh类创建VBO和VAO对象"></a>让Mesh类创建VBO和VAO对象</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java">[imports ...]<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Mesh</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">float</span>[] vertices;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> verticesCount;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> vaoId;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> vboId;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Mesh</span><span class="hljs-params">(<span class="hljs-type">float</span>[] vertices)</span> &#123;<br>        <span class="hljs-built_in">this</span>.vertices = vertices;<br>        <span class="hljs-built_in">this</span>.verticesCount = vertices.length / <span class="hljs-number">3</span>;<br><br>        <span class="hljs-type">FloatBuffer</span> <span class="hljs-variable">verticesBuffer</span> <span class="hljs-operator">=</span> MemoryUtil.memAllocFloat(<span class="hljs-built_in">this</span>.vertices.length);<br>        verticesBuffer.put(<span class="hljs-built_in">this</span>.vertices).flip();<br><br>        <span class="hljs-comment">// 顶点</span><br>        vaoId = glGenVertexArrays();<br>        glBindVertexArray(vaoId);<br>        vboId = glGenBuffers();<br>        glBindBuffer(GL_ARRAY_BUFFER, vboId);<br>        glBufferData(GL_ARRAY_BUFFER, verticesBuffer, GL_STATIC_DRAW);<br>        glEnableVertexAttribArray(<span class="hljs-number">0</span>);<br>        glVertexAttribPointer(<span class="hljs-number">0</span>, <span class="hljs-number">3</span>, GL_FLOAT, <span class="hljs-literal">false</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>        <span class="hljs-comment">// 解绑VBO</span><br>        glBindBuffer(GL_ARRAY_BUFFER, <span class="hljs-number">0</span>);<br>        <span class="hljs-comment">// 解绑VAO</span><br>        glBindVertexArray(<span class="hljs-number">0</span>);<br><br>        MemoryUtil.memFree(verticesBuffer);<br>    &#125;<br><br>    [G etter ...]<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">cleanup</span><span class="hljs-params">()</span> &#123;<br>        glDisableVertexAttribArray(<span class="hljs-number">0</span>);<br><br>        <span class="hljs-comment">// 删除VBO</span><br>        glBindBuffer(GL_ARRAY_BUFFER, <span class="hljs-number">0</span>);<br>        glDeleteBuffers(vboId);<br><br>        <span class="hljs-comment">// 删除VAO</span><br>        glBindVertexArray(<span class="hljs-number">0</span>);<br>        glDeleteVertexArrays(vaoId);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>一个程序不会只有一个<code>Mesh</code>，所以创建<code>Scene</code>来存储多个<code>Mesh</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java">[imports ...]<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Scene</span> &#123;<br>    <span class="hljs-keyword">private</span> List&lt;Mesh&gt; meshes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>    <span class="hljs-keyword">public</span> List&lt;Mesh&gt; <span class="hljs-title function_">getMeshes</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> meshes;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addMesh</span><span class="hljs-params">(Mesh mesh)</span> &#123;<br>        meshes.add(mesh);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">cleanup</span><span class="hljs-params">()</span> &#123;<br>        meshes.forEach(Mesh::cleanup);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后在<code>Engine</code>中实例化它。</p><p>修改<code>Render.render()</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">render</span><span class="hljs-params">(Scene scene)</span> &#123;<br>    [...]<br><br>    Render.shaderProgram.bind();<br><br>    scene.getMeshes().forEach((mesh) -&gt; &#123;<br>        <span class="hljs-comment">// 绑定VAO</span><br>        glBindVertexArray(mesh.getVaoId());<br><br>        <span class="hljs-comment">// 绘制顶点</span><br>        glDrawArrays(GL_TRIANGLES, <span class="hljs-number">0</span>, mesh.getVerticesCount());<br><br>        <span class="hljs-comment">// 还原状态</span><br>        glBindVertexArray(<span class="hljs-number">0</span>);<br>    &#125;);<br><br>    Render.shaderProgram.unbind();<br>&#125;<br></code></pre></td></tr></table></figure><p>然后在<code>Engine.cleanup()</code>中记得调用<code>Scene.cleanup()。</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">cleanup</span><span class="hljs-params">()</span> &#123;<br>    logic.cleanup();<br>    Render.cleanup();<br>    scene.cleanup();<br>    Window.cleanup();<br>&#125;<br></code></pre></td></tr></table></figure><p>最后测试一下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java">[imports ...]<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestLogic</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ILogic</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">float</span>[] vertices1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">float</span>[]&#123;<br>                <span class="hljs-number">0.0f</span>,  <span class="hljs-number">0.5f</span>, <span class="hljs-number">0.0f</span>,<br>                -<span class="hljs-number">0.5f</span>, -<span class="hljs-number">0.5f</span>, <span class="hljs-number">0.0f</span>,<br>                <span class="hljs-number">0.5f</span>, -<span class="hljs-number">0.5f</span>, <span class="hljs-number">0.0f</span><br>        &#125;;<br><br>        <span class="hljs-type">float</span>[] vertices2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">float</span>[]&#123;<br>                -<span class="hljs-number">1.0f</span>, <span class="hljs-number">1.0f</span>, <span class="hljs-number">0.0f</span>,<br>                -<span class="hljs-number">1.0f</span>, <span class="hljs-number">0.0f</span>, <span class="hljs-number">0.0f</span>,<br>                <span class="hljs-number">0.0f</span>, <span class="hljs-number">1.0f</span>, <span class="hljs-number">0.0f</span><br>        &#125;;<br><br>        <span class="hljs-type">Mesh</span> <span class="hljs-variable">mesh1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Mesh</span>(vertices1);<br>        <span class="hljs-type">Mesh</span> <span class="hljs-variable">mesh2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Mesh</span>(vertices2);<br><br>        Engine.scene.addMesh(mesh1);<br>        Engine.scene.addMesh(mesh2);<br>    &#125;<br>    <br>    [...]<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2024/07/18/lwjgl-05/image-20240718222352076.png" alt="运行结果"></p><p>在测试一个。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java">[imports ...]<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestLogic</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ILogic</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">float</span>[] vertices1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">float</span>[]&#123;<br>                -<span class="hljs-number">0.5f</span>,  <span class="hljs-number">0.5f</span>, <span class="hljs-number">0.0f</span>,<br>                -<span class="hljs-number">0.5f</span>, -<span class="hljs-number">0.5f</span>, <span class="hljs-number">0.0f</span>,<br>                <span class="hljs-number">0.5f</span>,  <span class="hljs-number">0.5f</span>, <span class="hljs-number">0.0f</span>,<br>                <span class="hljs-number">0.5f</span>,  <span class="hljs-number">0.5f</span>, <span class="hljs-number">0.0f</span>,<br>                -<span class="hljs-number">0.5f</span>, -<span class="hljs-number">0.5f</span>, <span class="hljs-number">0.0f</span>,<br>                <span class="hljs-number">0.5f</span>, -<span class="hljs-number">0.5f</span>, <span class="hljs-number">0.0f</span>,<br>        &#125;;<br><br>        <span class="hljs-type">Mesh</span> <span class="hljs-variable">mesh1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Mesh</span>(vertices1);<br><br>        Engine.scene.addMesh(mesh1);<br>    &#125;<br>    <br>    [...]<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2024/07/18/lwjgl-05/image-20240718222656862.png" alt="运行结果"></p><p>成功渲染一个矩形。</p><p>但有个致命缺点：顶点太多。</p><p>之后更改。</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>LWJGL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LWJGL教程04 - 渲染</title>
    <link href="/2024/07/18/lwjgl-04/"/>
    <url>/2024/07/18/lwjgl-04/</url>
    
    <content type="html"><![CDATA[<h1 id="渲染管线"><a href="#渲染管线" class="headerlink" title="渲染管线"></a>渲染管线</h1><p>在写代码之前，先了解openGL的渲染管线。</p><p><img src="/2024/07/18/lwjgl-04/20210128172144333.png" alt="渲染管线"></p><h2 id="顶点数据"><a href="#顶点数据" class="headerlink" title="顶点数据"></a>顶点数据</h2><p>顾名思义，三角形各个顶点的数据。</p><h2 id="顶点着色器"><a href="#顶点着色器" class="headerlink" title="顶点着色器"></a>顶点着色器</h2><p>通过坐标变换，将顶点数据变换到需要的坐标系下。</p><h2 id="图元装配"><a href="#图元装配" class="headerlink" title="图元装配"></a>图元装配</h2><p>将顶点组装成点，线，面等。</p><h2 id="几何着色器"><a href="#几何着色器" class="headerlink" title="几何着色器"></a>几何着色器</h2><h2 id="细分着色器"><a href="#细分着色器" class="headerlink" title="细分着色器"></a>细分着色器</h2><h2 id="光栅化"><a href="#光栅化" class="headerlink" title="光栅化"></a>光栅化</h2><p>将顶点数据转化为像素。</p><h2 id="片段着色器"><a href="#片段着色器" class="headerlink" title="片段着色器"></a>片段着色器</h2><p>将像素进行最后的着色。</p><h2 id="测试与混合"><a href="#测试与混合" class="headerlink" title="测试与混合"></a>测试与混合</h2><h1 id="创建着色器"><a href="#创建着色器" class="headerlink" title="创建着色器"></a>创建着色器</h1><p>先来创建顶点着色器<code>vertex.vert</code>。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#version 330</span><br><br>layout (location=<span class="hljs-number">0</span>) in vec3 position;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    gl_Position = vec4(position, <span class="hljs-number">1.0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>再来创建片段着色器<code>fragment.frag</code>。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#version 330</span><br><br>out vec4 fragColor;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    fragColor = vec4(<span class="hljs-number">0.0</span>, <span class="hljs-number">0.5</span>, <span class="hljs-number">0.5</span>, <span class="hljs-number">1.0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="使用着色器"><a href="#使用着色器" class="headerlink" title="使用着色器"></a>使用着色器</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs java">[imports ...]<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ShaderProgram</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> programId;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> vertexShaderId;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> fragmentShaderId;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ShaderProgram</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> RuntimeException &#123;<br>        programId = glCreateProgram();<br>        <span class="hljs-keyword">if</span> (programId == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;Could not create Shader&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">createVertexShader</span><span class="hljs-params">(String shaderCode)</span> &#123;<br>        vertexShaderId = createShader(shaderCode, GL_VERTEX_SHADER);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">createFragmentShader</span><span class="hljs-params">(String shaderCode)</span> &#123;<br>        fragmentShaderId = createShader(shaderCode, GL_FRAGMENT_SHADER);<br>    &#125;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-type">int</span> <span class="hljs-title function_">createShader</span><span class="hljs-params">(String shaderCode, <span class="hljs-type">int</span> shaderType)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">shaderId</span> <span class="hljs-operator">=</span> glCreateShader(shaderType);<br>        <span class="hljs-keyword">if</span> (shaderId == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;Error creating shader. Type: &quot;</span> + shaderType);<br>        &#125;<br><br>        glShaderSource(shaderId, shaderCode);<br>        glCompileShader(shaderId);<br><br>        <span class="hljs-keyword">if</span> (glGetShaderi(shaderId, GL_COMPILE_STATUS) == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;Error compiling Shader code: &quot;</span> + glGetShaderInfoLog(shaderId, <span class="hljs-number">1024</span>));<br>        &#125;<br><br>        glAttachShader(programId, shaderId);<br><br>        <span class="hljs-keyword">return</span> shaderId;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">link</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> RuntimeException &#123;<br>        glLinkProgram(programId);<br>        <span class="hljs-keyword">if</span> (glGetProgrami(programId, GL_LINK_STATUS) == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;Error linking Shader code: &quot;</span> + glGetProgramInfoLog(programId, <span class="hljs-number">1024</span>));<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (vertexShaderId != <span class="hljs-number">0</span>) &#123;<br>            glDetachShader(programId, vertexShaderId);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (fragmentShaderId != <span class="hljs-number">0</span>) &#123;<br>            glDetachShader(programId, fragmentShaderId);<br>        &#125;<br><br>        glValidateProgram(programId);<br>        <span class="hljs-keyword">if</span> (glGetProgrami(programId, GL_VALIDATE_STATUS) == <span class="hljs-number">0</span>) &#123;<br>            System.err.println(<span class="hljs-string">&quot;Warning validating Shader code: &quot;</span> + glGetProgramInfoLog(programId, <span class="hljs-number">1024</span>));<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">bind</span><span class="hljs-params">()</span> &#123;<br>        glUseProgram(programId);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">unbind</span><span class="hljs-params">()</span> &#123;<br>        glUseProgram(<span class="hljs-number">0</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">cleanup</span><span class="hljs-params">()</span> &#123;<br>        unbind();<br>        <span class="hljs-keyword">if</span> (programId != <span class="hljs-number">0</span>) &#123;<br>            glDeleteProgram(programId);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>还需要一个类来读取文件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">[imports ...]<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Utils</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">readFile</span><span class="hljs-params">(String filepath)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> Files.readString(Paths.get(filepath));<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在<code>Render</code>中添加<code>ShaderProgram</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java">[imports ...]<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Render</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ShaderProgram shaderProgram;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">createRender</span><span class="hljs-params">()</span> &#123;<br>        [...]<br>        shaderProgram = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ShaderProgram</span>();<br>        shaderProgram.createVertexShader(Utils.readFile(<span class="hljs-string">&quot;src/main/resources/vertex.vert&quot;</span>));<br>        shaderProgram.createFragmentShader(Utils.readFile(<span class="hljs-string">&quot;src/main/resources/fragment.frag&quot;</span>));<br>        shaderProgram.link();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">cleanup</span><span class="hljs-params">()</span> &#123;<br>        shaderProgram.cleanup();<br>    &#125;<br><br>    [...]<br>&#125;<br></code></pre></td></tr></table></figure><p>现在尝试绘制一点东西。</p><p>首先修改<code>ILogic</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ILogic</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">input</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">render</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">cleanup</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs java">[imports ...]<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestLogic</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ILogic</span> &#123;<br>    <span class="hljs-type">float</span>[] vertices;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span> &#123;<br>        vertices = <span class="hljs-keyword">new</span> <span class="hljs-title class_">float</span>[]&#123;<br>                <span class="hljs-number">0.0f</span>,  <span class="hljs-number">0.5f</span>, <span class="hljs-number">0.0f</span>,<br>                -<span class="hljs-number">0.5f</span>, -<span class="hljs-number">0.5f</span>, <span class="hljs-number">0.0f</span>,<br>                <span class="hljs-number">0.5f</span>, -<span class="hljs-number">0.5f</span>, <span class="hljs-number">0.0f</span><br>        &#125;;<br><br>        <span class="hljs-type">FloatBuffer</span> <span class="hljs-variable">verticesBuffer</span> <span class="hljs-operator">=</span> MemoryUtil.memAllocFloat(vertices.length);<br>        verticesBuffer.put(vertices).flip();<br>        vaoId = glGenVertexArrays();<br>        glBindVertexArray(vaoId);<br>        vboId = glGenBuffers();<br>        glBindBuffer(GL_ARRAY_BUFFER, vboId);<br>        glBufferData(GL_ARRAY_BUFFER, verticesBuffer, GL_STATIC_DRAW);<br>        glEnableVertexAttribArray(<span class="hljs-number">0</span>);<br>        glVertexAttribPointer(<span class="hljs-number">0</span>, <span class="hljs-number">3</span>, GL_FLOAT, <span class="hljs-literal">false</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>        <span class="hljs-comment">// 解绑VBO</span><br>        glBindBuffer(GL_ARRAY_BUFFER, <span class="hljs-number">0</span>);<br>        <span class="hljs-comment">// 解绑VAO</span><br>        glBindVertexArray(<span class="hljs-number">0</span>);<br>        MemoryUtil.memFree(verticesBuffer);<br>    &#125;<br><br>    <span class="hljs-type">int</span> vaoId;<br>    <span class="hljs-type">int</span> vboId;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">render</span><span class="hljs-params">()</span> &#123;<br><br>        Render.shaderProgram.bind();<br><br>        <span class="hljs-comment">// 绑定VAO</span><br>        glBindVertexArray(vaoId);<br><br>        <span class="hljs-comment">// 绘制顶点</span><br>        glDrawArrays(GL_TRIANGLES, <span class="hljs-number">0</span>, <span class="hljs-number">3</span>);<br><br>        <span class="hljs-comment">// 还原状态</span><br>        glBindVertexArray(<span class="hljs-number">0</span>);<br><br>        Render.shaderProgram.unbind();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">input</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (Window.isKeyPressed(GLFW.GLFW_KEY_SPACE))<br>            System.out.println(<span class="hljs-string">&quot;Space is pressed&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">cleanup</span><span class="hljs-params">()</span> &#123;<br><br>        glDisableVertexAttribArray(<span class="hljs-number">0</span>);<br><br>        <span class="hljs-comment">// 删除VBO</span><br>        glBindBuffer(GL_ARRAY_BUFFER, <span class="hljs-number">0</span>);<br>        glDeleteBuffers(vboId);<br><br>        <span class="hljs-comment">// 删除VAO</span><br>        glBindVertexArray(<span class="hljs-number">0</span>);<br>        glDeleteVertexArrays(vaoId);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>还要修改<code>Engine</code>类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.game;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Engine</span> &#123;<br>    [...]<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        [...]<br>        <br>        logic.init();<br>        Render.createRender();<br>        <br>        [...]<br>        <span class="hljs-keyword">while</span>(!Window.windowShouldClose()) &#123;<br>            [...]<br><br>            Render.render();<br><br>            logic.render();<br>            <br>            [...]<br>        &#125;<br>        [...]<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">cleanup</span><span class="hljs-params">()</span> &#123;<br>        logic.cleanup();<br>        Render.cleanup();<br>        Window.cleanup();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试一下。</p><p><img src="/2024/07/18/lwjgl-04/image-20240718184705692.png" alt="一个三角形 - 运行结果"></p><p>经过努力，终于绘制出了第一个三角形。</p><p>但是代码写的杂乱无章，还需要修改。</p><p>之后将会改进代码。</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>LWJGL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LWJGL教程03 - 改进</title>
    <link href="/2024/07/18/lwjgl-03/"/>
    <url>/2024/07/18/lwjgl-03/</url>
    
    <content type="html"><![CDATA[<h1 id="让Render类处理渲染相关的事"><a href="#让Render类处理渲染相关的事" class="headerlink" title="让Render类处理渲染相关的事"></a>让Render类处理渲染相关的事</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java">[imports ...]<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Render</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">createRender</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// createCapabilities 创建功能</span><br>        GL.createCapabilities();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">cleanup</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// TODO</span><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">render</span><span class="hljs-params">()</span> &#123;<br>        glClearColor(<br>                Window.settings.color[<span class="hljs-number">0</span>], Window.settings.color[<span class="hljs-number">1</span>],<br>                Window.settings.color[<span class="hljs-number">2</span>], Window.settings.color[<span class="hljs-number">3</span>]);<br>        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);<br>        <br>        glViewport(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, Window.getWidth(), Window.getHeight());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>创建完<code>Render</code>类后，需要在正确的位置调用它。</p><p>所以要修改<code>Engine</code>类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java">[imports ...]<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Engine</span> &#123;<br>    [...]<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        Window.createWindow(Engine.window_settings);<br>        <span class="hljs-comment">// 添加在 Window.createWindow() 后</span><br>        Render.createRender();                          <br>        Window.setWindowVisible();<br>        <br>        [...]<br><br>        <span class="hljs-keyword">while</span>(!Window.windowShouldClose()) &#123;<br>            Window.pollEvents();<br><br>            logic.input();<br><br>            <span class="hljs-comment">// 添加在 Window.update() 前</span><br>            Render.render();<br><br>            Window.update();<br><br>            [...]<br>        &#125;<br>        cleanup();<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">cleanup</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 别忘了</span><br>        Render.cleanup();<br>        Window.cleanup();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试一下能不能修改颜色。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestEngine</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        Engine.init();<br>        Window.settings<br>                .setTitle(<span class="hljs-string">&quot;Test Color&quot;</span>)<br>                .setVsync(<span class="hljs-literal">true</span>)<br>                .setColor(<span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>);<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        glClearColor(r, g, b, a) 的三个参数均是不大于1的浮点数</span><br><span class="hljs-comment">        所以想用小于255的int设置颜色还需要除以255</span><br><span class="hljs-comment">        */</span><br>        Engine.logic = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TestLogic</span>();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Engine</span>().run();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2024/07/18/lwjgl-03/image-20240718172726410.png" alt="变成白色底了 - 运行结果"></p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>LWJGL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LWJGL教程02 - 循环</title>
    <link href="/2024/07/18/lwjgl-02/"/>
    <url>/2024/07/18/lwjgl-02/</url>
    
    <content type="html"><![CDATA[<h1 id="让Engine类处理循环"><a href="#让Engine类处理循环" class="headerlink" title="让Engine类处理循环"></a>让Engine类处理循环</h1><p>上一篇成功创建了窗口，但是循环内的工作在每次创建新程序时仍要重写，很麻烦。</p><p>故将循环的工作交给<code>Engine</code>来处理。</p><p>先来梳理一下循环内要做什么。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">while</span>(running) &#123;<br>    input();<br>    update();<br>    render();<br>&#125;<br></code></pre></td></tr></table></figure><p><code>Engine</code>还要负责<code>init()</code>部分的工作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java">[imports ...]<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Engine</span> &#123;<br>    <span class="hljs-keyword">static</span> Window.Settings settings;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(Window.Settings settings)</span> &#123;<br>        Engine.settings = settings;<br>        Window.settings = settings;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span> &#123;<br>        Engine.settings = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Window</span>.Settings();<br>        settings.setTitle(<span class="hljs-string">&quot;Game&quot;</span>)<br>                .setWidth(<span class="hljs-number">800</span>)<br>                .setHeight(<span class="hljs-number">600</span>)<br>                .setColor(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">255</span>);<br>        Window.settings = settings;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        Window.createWindow(settings);<br>        Window.setWindowVisible();<br><br>        <span class="hljs-type">long</span> <span class="hljs-variable">lastTime</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">frames</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">while</span>(!Window.windowShouldClose()) &#123;<br>            Window.pollEvents();<br><br>            Window.update();<br><br>            ++frames;<br><br>            <span class="hljs-keyword">while</span>(System.currentTimeMillis() &gt;= lastTime + <span class="hljs-number">1000L</span>) &#123;<br>                System.out.println(frames + <span class="hljs-string">&quot; fps&quot;</span>);<br>                lastTime += <span class="hljs-number">1000L</span>;<br>                frames = <span class="hljs-number">0</span>;<br>            &#125;<br>        &#125;<br>        cleanup();<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">cleanup</span><span class="hljs-params">()</span> &#123;<br>        Window.cleanup();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>现在测试一下<code>Engine</code>类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">[imports ...]<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestEngine</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        Engine.init();<br>        Window.settings.setTitle(<span class="hljs-string">&quot;Test Engine&quot;</span>)<br>                .setVsync(<span class="hljs-literal">true</span>);<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Engine</span>().run();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2024/07/18/lwjgl-02/image-20240718120122278.png" alt="运行结果"></p><p><code>input()</code>的工作，通过<code>ILogic</code>实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ILogic</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">input</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后在<code>Engine</code>中添加<code>ILogic</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ILogic logic;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(Window.Settings settings, ILogic logic)</span> &#123;<br>    [...]<br>    <br>    Engine.logic = logic;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span> &#123;                  <br>    [...]<br>    <br>    logic = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ILogic</span>() &#123;                   <br>        <span class="hljs-meta">@Override</span>                            <br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">input</span><span class="hljs-params">()</span> &#123;&#125;              <br>    &#125;;                                      <br>&#125;                                           <br></code></pre></td></tr></table></figure><p>在循环中调用<code>input()</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        [...]<br>    <br>    <span class="hljs-keyword">while</span>(!Window.windowShouldClose()) &#123;<br>        [...]<br><br>        logic.input();<br>        <br>      Window.update();<br>        <br>        [...]<br>    &#125;<br>    <br>    [...]<br>&#125;<br></code></pre></td></tr></table></figure><p>现在测试一下<code>ILogic</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">[imports ...]<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestLogic</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ILogic</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">input</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (Window.isKeyPressed(GLFW.GLFW_KEY_SPACE))<br>            System.out.println(<span class="hljs-string">&quot;Space is pressed&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">[imports ...]<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestEngine</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        Engine.init();<br>        Window.settings.setTitle(<span class="hljs-string">&quot;Test Logic&quot;</span>)<br>                .setVsync(<span class="hljs-literal">true</span>);<br>        Engine.logic = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TestLogic</span>();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Engine</span>().run();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2024/07/18/lwjgl-02/image-20240718124223973.png" alt="按下空格后 - 运行结果"></p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>LWJGL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>The Metamorphosis - Franz Kafka</title>
    <link href="/2024/07/17/The-Metamorphosis/"/>
    <url>/2024/07/17/The-Metamorphosis/</url>
    
    <content type="html"><![CDATA[<h1 id="变形记-弗兰兹-·-卡夫卡"><a href="#变形记-弗兰兹-·-卡夫卡" class="headerlink" title="变形记 - 弗兰兹 · 卡夫卡"></a>变形记 - 弗兰兹 · 卡夫卡</h1><blockquote><p>一天早晨，格里高尔·萨姆沙从不安的睡梦中醒来，发现自己躺在床上变成了一只巨大的甲虫。</p></blockquote><p>卡夫卡的《变形记》讲述了一个极其荒诞的故事。这荒诞体现在多个方面。最直观的便是格里高尔 · 萨姆沙变成甲虫，但《变形记》的荒诞不只是在“变形”这件事上，甚至可以说，这并不荒诞。</p><p>在小说中，格里高尔变成甲虫前，他是家中受到尊敬的长子，父母夸奖他，妹妹爱戴他。而当他变成甲虫后，全家对他只有嫌弃。这就是《变形记》的荒诞之处。</p><p>设想当家人变为了非人，多数人是怎样的：或许会十分着急，又或许百般照料，但总不会是像小说中的家人那样：毫不关心，甚至充满厌恶，以至在格里高尔死后如释重负的去旅行。论失去人形，在失去人性面前反倒没有这么荒诞了。</p><p>在格里高尔变成甲虫后，他的家人对他的态度并不是如坠下悬崖般变差的，而是渐渐变化的。小说中房门被打开过三次，这也对应着家人对他的态度的三次转变：</p><p>第一次，还残留着人的知觉于虫身的格里高尔，待在自己的房间，尝试以人类方式起床，耗去了大半天时间，家人担心他忘了出差，隔着门叫他、捶门提醒他，此时他尚能说话，找了借口后继续试着起身。之后门打开，一阵混乱尤其是吓跑了公司主任后，他的父亲粗暴地将他的房门关上，格里高尔因此断了一只足。</p><p>第二次，也是小说的高潮。一直以来照顾格里高尔的是妹妹格丽特，因为搬动家具，母亲进入房间，看见格里高尔的模样，惊叫奔逃，他爬出房间，本来想要帮忙，却被父亲投掷苹果，连番攻击下，一枚苹果陷进肉里，由于母亲的劝阻，才得以活命。</p><p>第三次，接近小说的尾声，也接近格里高尔生命的终点。这次开门，他依旧是为了对家人的爱打开房门，这一回是要告诉妹妹，他原本要供她读音乐学院。令人心酸的是：此时，听格丽特拉小提琴的三位房客不喜她的演奏，而父母向来不把她的音乐梦想当回事，只有这只变形为虫的格里高尔为她的音乐、音乐梦而来。但是三位房客因为格里高尔的存在打算对萨姆沙一家提起诉讼，直接触及金钱，使格丽特彻底放弃人性，她劝说父母把格里高尔扔出去，因为他是虫，不是人。听到这里，格里高尔如遭雷击，然而衰病的他无力表现出剧烈的情绪，缓缓地关门，安静地在门后死去。翌日，世界和家庭的春天一同到来。第三次开门，严重彻底虫化；第三次关门，死亡。</p><p>在格里高尔死后，萨姆沙一家流露出“终于死了”的情绪，他们乐见生活回归正轨，一切都变得美好，至此小说结束。</p><p>小说中对父亲的描写并不多，但令人深刻。在变形后，他的父亲找了份工作，开始穿西装，即便睡觉也不脱下，到最后，变得油腻脏污，与他的初衷背道而驰。他父亲身上的西装又何尝不是他父亲的虫壳呢。随仍是人形，但其实异变早已开始。</p><p>小说中他的妹妹在无形中让格里高尔精神上变为甲虫。先是从腐败的食物开始，再到后来为了让格里高尔在屋里爬行而将家具拿走，一点点的是格里高尔愈来愈像甲虫。但极其讽刺的是，她反而是格里高尔最关心和信任的人，付出最多亲情的人。正如纳博科夫所说，高兴到请假休息的萨姆沙一家才是昆虫，变形的格里高尔才是真正的人，反映在小说里——格里高尔死后，文中“父亲”、“母亲”等称谓不再出现。</p><p>纵观小说，看似只有格里高尔一人形变，但细想，却发现，除他外，萨姆沙一家都发生了形变。</p><p>卡夫卡的小说注定是悲剧。</p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>读后感</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LWJGL教程01 - 创建窗口</title>
    <link href="/2024/07/17/lwjgl-01/"/>
    <url>/2024/07/17/lwjgl-01/</url>
    
    <content type="html"><![CDATA[<h1 id="从示范代码到Window类"><a href="#从示范代码到Window类" class="headerlink" title="从示范代码到Window类"></a>从示范代码到Window类</h1><p>先来看实例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><code class="hljs java">[imports ...]<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloWorld</span> &#123;<br><br><span class="hljs-comment">// The window handle</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">long</span> window;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;Hello LWJGL &quot;</span> + Version.getVersion() + <span class="hljs-string">&quot;!&quot;</span>);<br><br>init();<br>loop();<br><br><span class="hljs-comment">// Free the window callbacks and destroy the window</span><br>glfwFreeCallbacks(window);<br>glfwDestroyWindow(window);<br><br><span class="hljs-comment">// Terminate GLFW and free the error callback</span><br>glfwTerminate();<br>glfwSetErrorCallback(<span class="hljs-literal">null</span>).free();<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-comment">// Setup an error callback. The default implementation</span><br><span class="hljs-comment">// will print the error message in System.err.</span><br>GLFWErrorCallback.createPrint(System.err).set();<br><br><span class="hljs-comment">// Initialize GLFW. Most GLFW functions will not work before doing this.</span><br><span class="hljs-keyword">if</span> ( !glfwInit() )<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalStateException</span>(<span class="hljs-string">&quot;Unable to initialize GLFW&quot;</span>);<br><br><span class="hljs-comment">// Configure GLFW</span><br>glfwDefaultWindowHints(); <span class="hljs-comment">// optional, the current window hints are already the default</span><br>glfwWindowHint(GLFW_VISIBLE, GLFW_FALSE); <span class="hljs-comment">// the window will stay hidden after creation</span><br>glfwWindowHint(GLFW_RESIZABLE, GLFW_TRUE); <span class="hljs-comment">// the window will be resizable</span><br><br><span class="hljs-comment">// Create the window</span><br>window = glfwCreateWindow(<span class="hljs-number">300</span>, <span class="hljs-number">300</span>, <span class="hljs-string">&quot;Hello World!&quot;</span>, NULL, NULL);<br><span class="hljs-keyword">if</span> ( window == NULL )<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;Failed to create the GLFW window&quot;</span>);<br><br><span class="hljs-comment">// Setup a key callback. It will be called every time a key is pressed, repeated or released.</span><br>glfwSetKeyCallback(window, (window, key, scancode, action, mods) -&gt; &#123;<br><span class="hljs-keyword">if</span> ( key == GLFW_KEY_ESCAPE &amp;&amp; action == GLFW_RELEASE )<br>glfwSetWindowShouldClose(window, <span class="hljs-literal">true</span>); <span class="hljs-comment">// We will detect this in the rendering loop</span><br>&#125;);<br><br><span class="hljs-comment">// Get the thread stack and push a new frame</span><br><span class="hljs-keyword">try</span> ( <span class="hljs-type">MemoryStack</span> <span class="hljs-variable">stack</span> <span class="hljs-operator">=</span> stackPush() ) &#123;<br><span class="hljs-type">IntBuffer</span> <span class="hljs-variable">pWidth</span> <span class="hljs-operator">=</span> stack.mallocInt(<span class="hljs-number">1</span>); <span class="hljs-comment">// int*</span><br><span class="hljs-type">IntBuffer</span> <span class="hljs-variable">pHeight</span> <span class="hljs-operator">=</span> stack.mallocInt(<span class="hljs-number">1</span>); <span class="hljs-comment">// int*</span><br><br><span class="hljs-comment">// Get the window size passed to glfwCreateWindow</span><br>glfwGetWindowSize(window, pWidth, pHeight);<br><br><span class="hljs-comment">// Get the resolution of the primary monitor</span><br><span class="hljs-type">GLFWVidMode</span> <span class="hljs-variable">vidmode</span> <span class="hljs-operator">=</span> glfwGetVideoMode(glfwGetPrimaryMonitor());<br><br><span class="hljs-comment">// Center the window</span><br>glfwSetWindowPos(<br>window,<br>(vidmode.width() - pWidth.get(<span class="hljs-number">0</span>)) / <span class="hljs-number">2</span>,<br>(vidmode.height() - pHeight.get(<span class="hljs-number">0</span>)) / <span class="hljs-number">2</span><br>);<br>&#125; <span class="hljs-comment">// the stack frame is popped automatically</span><br><br><span class="hljs-comment">// Make the OpenGL context current</span><br>glfwMakeContextCurrent(window);<br><span class="hljs-comment">// Enable v-sync</span><br>glfwSwapInterval(<span class="hljs-number">1</span>);<br><br><span class="hljs-comment">// Make the window visible</span><br>glfwShowWindow(window);<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">loop</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-comment">// This line is critical for LWJGL&#x27;s interoperation with GLFW&#x27;s</span><br><span class="hljs-comment">// OpenGL context, or any context that is managed externally.</span><br><span class="hljs-comment">// LWJGL detects the context that is current in the current thread,</span><br><span class="hljs-comment">// creates the GLCapabilities instance and makes the OpenGL</span><br><span class="hljs-comment">// bindings available for use.</span><br>GL.createCapabilities();<br><br><span class="hljs-comment">// Set the clear color</span><br>glClearColor(<span class="hljs-number">1.0f</span>, <span class="hljs-number">0.0f</span>, <span class="hljs-number">0.0f</span>, <span class="hljs-number">0.0f</span>);<br><br><span class="hljs-comment">// Run the rendering loop until the user has attempted to close</span><br><span class="hljs-comment">// the window or has pressed the ESCAPE key.</span><br><span class="hljs-keyword">while</span> ( !glfwWindowShouldClose(window) ) &#123;<br>glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT); <span class="hljs-comment">// clear the framebuffer</span><br><br>glfwSwapBuffers(window); <span class="hljs-comment">// swap the color buffers</span><br><br><span class="hljs-comment">// Poll for window events. The key callback above will only be</span><br><span class="hljs-comment">// invoked during this call.</span><br>glfwPollEvents();<br>&#125;<br>&#125;<br><br>[main ...]<br><br>&#125;<br></code></pre></td></tr></table></figure><p>虽然不多，但初见着实让人有点头晕。</p><p>将整个程序归纳为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">[init ...]<br><span class="hljs-keyword">while</span>(!glfwWindowShouldClose(window)) &#123;<br>    [<span class="hljs-keyword">do</span> something ...]<br>&#125;<br>[close ...]<br></code></pre></td></tr></table></figure><p><code>Window</code>类的工作大致就是实现<code>init()</code>的内容。</p><p>为了能够自定义窗口的各种属性，在<code>Window</code>类中创建一个内部类<code>Settings</code>来存储相关参数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Settings</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> width;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> height;<br>    <span class="hljs-keyword">public</span> String ztitle;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">vsync</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">float</span>[] color = <span class="hljs-keyword">new</span> <span class="hljs-title class_">float</span>[<span class="hljs-number">4</span>];<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">Callable</span> <span class="hljs-variable">resizeCallback</span> <span class="hljs-operator">=</span> () -&gt; <span class="hljs-literal">null</span>;<br>    <br>    [Setter &amp; Getter ...]<br>&#125;<br></code></pre></td></tr></table></figure><p>然后将示例代码终端<code>init()</code>提取出来，并将<code>width</code>，<code>height</code>，<code>title</code>替换进去。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs java">[imports ...]<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Window</span> &#123;<br>    [Settings]<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">long</span> window;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Settings settings;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">createWindow</span><span class="hljs-params">(Settings settings)</span> &#123;<br>        Window.settings = settings;<br><br>        [...]<br>        <br>        <span class="hljs-comment">// Create the window</span><br>        window = glfwCreateWindow(settings.width, settings.height, settings.title, NULL, NULL);<br>        <br>        [...]<br>        <br>        <span class="hljs-comment">// Enable v-sync</span><br>        glfwSwapInterval(<span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">if</span>(settings.vsync)<br>            glfwSwapInterval(<span class="hljs-number">1</span>);<br>        <br>        glfwSetFramebufferSizeCallback(window, (window, width, height) -&gt; &#123;<br>            Window.width = width;<br>            Window.height = height;<br>            <span class="hljs-keyword">try</span> &#123;<br>                settings.resizeCallback.call();<br>            &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>            &#125;<br>        &#125;);<br>        <br>        GL.createCapabilities();<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">windowShouldClose</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> glfwWindowShouldClose(window);<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pollEvents</span><span class="hljs-params">()</span> &#123;<br>        glfwPollEvents();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">cleanup</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// Free the window callbacks and destroy the window</span><br>        glfwFreeCallbacks(window);<br>        glfwDestroyWindow(window);<br><br>        <span class="hljs-comment">// Terminate GLFW and free the error callback</span><br>        glfwTerminate();<br>        glfwSetErrorCallback(<span class="hljs-literal">null</span>).free();<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setWindowVisible</span><span class="hljs-params">()</span> &#123;<br>        glfwShowWindow(window);<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isKeyPressed</span><span class="hljs-params">(<span class="hljs-type">int</span> keyCode)</span> &#123;<br>        <span class="hljs-keyword">return</span> glfwGetKey(window, keyCode) == GLFW_PRESS;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>现在测试一下<code>Window</code>类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java">[imports ...]<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestWindow</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        Window.<span class="hljs-type">Settings</span> <span class="hljs-variable">settings</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Window</span>.Settings();<br>        settings.width = <span class="hljs-number">800</span>;<br>        settings.height = <span class="hljs-number">600</span>;<br>        settings.title = <span class="hljs-string">&quot;Test Window&quot;</span>;<br>        Window.createWindow(settings);<br>        Window.setWindowVisible();<br>        <span class="hljs-keyword">while</span> (!Window.windowShouldClose())<br>            Window.pollEvents();<br>        Window.cleanup();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2024/07/17/lwjgl-01/image-20240717220844478.png" alt="运行结果"></p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>LWJGL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LWJGL教程00 - 前言</title>
    <link href="/2024/07/17/lwjgl-00/"/>
    <url>/2024/07/17/lwjgl-00/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>心血来潮，想着写一个游戏。</p><p>但大部分仍在活跃的开源游戏引擎大都采用C++或其他语言编写，学习成本较大。</p><p>再者，从头写一个引擎也是一件十分有趣之事。<del>虽然很难就是了</del>（笑）</p><p>笔者打算从openGL学起。</p><p>学习时难免有些要记的东西，故为之文也。</p><p>LWJGL网上教程很少，只有<a href="https://mouse0w0.github.io/lwjglbook-CN-Translation/">这篇</a>相对完整。</p><p>奈何水平有限，看的云里雾里。</p><p>因此此文还会加以补充。</p><p>标题虽叫教程，但其实就是笔记，只是因为最初起标题时叫教程而已。</p><p>前言的最后，由于笔者水平有限，缺点和疏漏在所难免。</p><p>这里引用沈复先生的一句话：</p><p>所愧少年失学，稍识之无，不过记其实情实事而已，若必考订其文法，是责明于垢鉴矣。</p><h1 id="环境的配置"><a href="#环境的配置" class="headerlink" title="环境的配置"></a>环境的配置</h1><p>环境的配置相对简单，<a href="https://mouse0w0.github.io/lwjglbook-CN-Translation/">教程</a>写的也很清楚，大可放心照着做。</p><p>这里就不过多赘述。</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>LWJGL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>古老的故事</title>
    <link href="/1970/01/01/story/"/>
    <url>/1970/01/01/story/</url>
    
    <content type="html"><![CDATA[<blockquote><p>  सर्व संस्कारा अनित्याः</p><p>  诸行无常。</p></blockquote><p>西西弗斯本人或许并不感到荒诞，甚至乐在其中。</p><p>他的命运是属于他的。</p><p>他的岩石是他的事情。</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
